slug: vault-basics
id: likpqjspv5pp
type: track
title: Vault Basics
teaser: Learn how to setup and run some basic Vault CLI commands.
description: |-
  Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, or certificates. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.

  Vault tightly controls access to secrets by authenticating against trusted sources of identity such as Active Directory, LDAP, Kubernetes, CloudFoundry, and cloud platforms. Vault enables fine grained authorization of which users and applications are permitted access to secrets.

  We invite you to join the ranks of the Vault community today!

  This track will introduce you to Vault open source, starting with the Vault CLI and running a Vault dev server.
icon: https://storage.googleapis.com/instruqt-frontend/assets/hashicorp/tracks/vault.png
tags:
- vault
- basics
owner: hashicorp
developers:
- roger@hashicorp.com
private: true
published: true
challenges:
- slug: vault-cli
  id: q5vaptbwlx9v
  type: challenge
  title: The Vault CLI
  teaser: Run the Vault Command Line Interface (CLI).
  assignment: |-
    The Vault Command Line Interface (CLI) allows you to interact with Vault servers.

    Let's start with some basic vault commands, running them in the "Vault CLI" terminal on the left.

    Check the version of Vault running on your machine:
    ```
    vault version
    ```

    See the list of Vault CLI commands:
    ```
    vault help
    ```

    Get help for the `vault secrets` command:
    ```
    vault secrets -h
    ```
    Note that you can also use the `-help` and `--help` flags instead of `-h`.

    Get help for the `vault read` command:
    ```
    vault read -h
    ```
    Scroll back up to get a feeling for how you would read secrets from Vault.
  notes:
  - type: text
    contents: |-
      Vault open source is a command line application that you can download and run from your laptop or virtual workstation.

      It is written in Go and runs on macOS, Windows, Linux and other operating systems. You can always download the latest version of vault here:

      https://www.vaultproject.io/downloads.html
  - type: text
    contents: |-
      Installing Vault on your laptop or workstation is easy. You simply download the zip file, unpack it, and place it somewhere in your PATH.

      Check out this tutorial for step-by-step instructions:
      https://learn.hashicorp.com/vault/getting-started/install

      We've pre-installed Vault in your Instruqt lab environment so that you can run a Vault server.
  tabs:
  - title: Vault CLI
    type: terminal
    hostname: vault-cli
  difficulty: basic
  timelimit: 300
- slug: your-first-secret
  id: yh9gwncelmb5
  type: challenge
  title: Your First Secret
  teaser: Write your first secret to Vault.
  assignment: |-
    Vault servers can be run in "dev" and "production" modes. You can see this by getting help for the `vault server` CLI command:
    ```
    vault server -h
    ```
    If you do run this, scroll back up to see information about the two modes.

    Let's run a Vault dev server in the "Vault Dev Server" tab:
    ```
    vault server -dev -dev-listen-address=0.0.0.0:8200
    ```
    Note that we are instructing the Vault server to bind to all IP addresses so that we can access it with the Vault UI that is running in a different container.

    Log into the Vault UI with the token `root`.

    In the "Vault CLI" tab, write a secret to the KV v2 secrets engine that the Vault dev server automatically mounted for you:
    ```
    vault kv put secret/my-first-secret age=<age>
    ```
    where <age> is your age.

    Alternatively, you could create this secret in the Vault UI by selecting the `secret/` KV v2 secrets engine on the `Secrets` tab, clicking the `Create secret +` button, specifying `my-first-secret` as the path, age as the secret's first key, and your age as the corresponding value, and then finally clicking the `Save` button. You do not need to click the `Add` button to add the first key and value.

    In the Vault UI, select the "secret/" KV v2 secrets engine, select the `my-first-secret` secret, and click the eye icon to see your age.

    If you lied about your age, you can correct it in the Vault UI by clicking the `Create new version +` button, or with the Vault CLI by repeating the `vault kv put` command with your real age. Don't worry, nobody else can see it!
  notes:
  - type: text
    contents: |-
      In this challenge, you will run your first Vault server in "dev" mode and write your first secret to Vault.

      See https://www.vaultproject.io/docs/concepts/dev-server.html for more on Vault's "dev" mode.

      You will use the default KV v2 secrets engine that Vault automatically creates in "dev" mode. It is used to store multiple versions of static secrets.

      See https://www.vaultproject.io/docs/secrets/kv/kv-v2.html for more on the KV v2 secrets engine.
  tabs:
  - title: Vault CLI
    type: terminal
    hostname: vault-cli
  - title: Vault Dev Server
    type: terminal
    hostname: vault-cli
  - title: Vault UI
    type: service
    hostname: vault-cli
    port: 8200
  difficulty: basic
  timelimit: 300
checksum: "12271176377690307125"
